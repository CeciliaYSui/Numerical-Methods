% Cecilia Sui % Exercise #2 function [x, M] = naive_gauss(A, b)          % forward elimination  [n,~] = size(A);                          % n is the size of the n by n matrix A   x = zeros(n,1);                           % initialize x to be a single-subscripted matrix of all zeros   for k = 1 : (n-1)                         % perform forward elimination according to     for i = (k+1) : n                       % the algorithm given in textbook      xmult = A(i,k) / A(k,k);              % save value for xmult which is use multiple times in the following operations       A(i,k) = xmult;                       % let matrix A position at row i column k to have the value of xmult      for j = (k+1) : n                     % loop through the righthand side of a(i,k)         A(i,j) = A(i,j) - xmult * A(k,j);   % change the value of upper right triangle part of matrix A via the loop      endfor                                % create all zeros below the leading 1 of the above row         b(i,:) = b(i,:) - xmult * b(k,:);   % change values for the righthand side of system of equations     endfor                                  % lower left triangle entries below diagnal should be all zeros   endfor   % back substitution  x(n,:) = b(n,:) / A(n,n);   for i = (n-1) : -1: 1                     % i runs from n-1 to 1, by increment of (-1)     sum = b(i,:);     for j = (i+1) : n      sum = sum - A(i,j) * x(j,:);     endfor     x(i,:) = sum / A(i,i); 
  endfor  M = A;                                    % assign M to be returned with the values of modified matrix A  return                                    % display solutions endfunction
